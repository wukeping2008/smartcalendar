\n'use client'\n\nimport { Event, EventCategory, Priority, EnergyLevel } from '../../types/event'\n\n/**\n * AI服务 - 智能日程管理核心引擎\n * 包含：习惯学习、智能提醒、冲突解决、优化推荐\n */\n\n// AI学习的用户习惯数据\ninterface UserHabits {\n  // 时间偏好\n  preferredWorkingHours: { start: number; end: number }\n  peakEnergyHours: number[]\n  lowEnergyHours: number[]\n  \n  // 类别偏好\n  categoryFrequency: Record<EventCategory, number>\n  categoryDurations: Record<EventCategory, number>\n  categoryPriorities: Record<EventCategory, Priority>\n  \n  // 行为模式\n  averageEventDuration: number\n  bufferTimePreference: number // 事件间隔偏好\n  multitaskingCapability: number // 多任务处理能力评分\n  \n  // 灵活性\n  reschedulingPatterns: {\n    category: EventCategory\n    flexibility: number\n    frequentChanges: boolean\n  }[]\n}\n\n// AI分析结果\ninterface AIAnalysis {\n  habitScore: number // 习惯匹配度\n  energyAlignment: number // 精力匹配度\n  conflictRisk: number // 冲突风险\n  optimizationScore: number // 优化得分\n  recommendations: AIRecommendation[]\n}\n\n// AI推荐\ninterface AIRecommendation {\n  type: 'time_adjustment' | 'energy_optimization' | 'conflict_resolution' | 'habit_improvement'\n  title: string\n  description: string\n  impact: 'high' | 'medium' | 'low'\n  confidence: number\n  action?: string\n}\n\nclass AIService {\n  private userHabits: UserHabits\n  private learningData: Event[] = []\n  private analysisCache: Map<string, AIAnalysis> = new Map()\n\n  constructor() {\n    // 初始化默认用户习惯\n    this.userHabits = {\n      preferredWorkingHours: { start: 9, end: 17 },\n      peakEnergyHours: [9, 10, 11, 14, 15],\n      lowEnergyHours: [13, 16, 17, 18],\n      categoryFrequency: {\n        [EventCategory.WORK]: 5,\n        [EventCategory.MEETING]: 3,\n        [EventCategory.PERSONAL]: 2,\n        [EventCategory.BREAK]: 4,\n        [EventCategory.EXERCISE]: 1,\n        [EventCategory.MEAL]: 3,\n        [EventCategory.TRAVEL]: 1,\n        [EventCategory.TRADING]: 8,\n        [EventCategory.LIFE_ROUTINE]: 4,\n        [EventCategory.PREPARATION]: 2,\n        [EventCategory.OTHER]: 1\n      },\n      categoryDurations: {\n        [EventCategory.WORK]: 120,\n        [EventCategory.MEETING]: 60,\n        [EventCategory.PERSONAL]: 90,\n        [EventCategory.BREAK]: 15,\n        [EventCategory.EXERCISE]: 45,\n        [EventCategory.MEAL]: 45,\n        [EventCategory.TRAVEL]: 30,\n        [EventCategory.TRADING]: 5,\n        [EventCategory.LIFE_ROUTINE]: 30,\n        [EventCategory.PREPARATION]: 20,\n        [EventCategory.OTHER]: 60\n      },\n      categoryPriorities: {\n        [EventCategory.WORK]: Priority.HIGH,\n        [EventCategory.MEETING]: Priority.HIGH,\n        [EventCategory.PERSONAL]: Priority.MEDIUM,\n        [EventCategory.BREAK]: Priority.LOW,\n        [EventCategory.EXERCISE]: Priority.MEDIUM,\n        [EventCategory.MEAL]: Priority.MEDIUM,\n        [EventCategory.TRAVEL]: Priority.LOW,\n        [EventCategory.TRADING]: Priority.URGENT,\n        [EventCategory.LIFE_ROUTINE]: Priority.MEDIUM,\n        [EventCategory.PREPARATION]: Priority.HIGH,\n        [EventCategory.OTHER]: Priority.LOW\n      },\n      averageEventDuration: 60,\n      bufferTimePreference: 15,\n      multitaskingCapability: 0.7,\n      reschedulingPatterns: [\n        { category: EventCategory.TRADING, flexibility: 20, frequentChanges: false },\n        { category: EventCategory.MEETING, flexibility: 30, frequentChanges: false },\n        { category: EventCategory.PERSONAL, flexibility: 80, frequentChanges: true }\n      ]\n    }\n  }\n\n  /**\n   * 学习用户习惯\n   */\n  learnFromEvents(events: Event[]): void {\n    this.learningData = events\n    this.updateHabitsFromData(events)\n    console.log('🧠 AI学习完成:', this.userHabits)\n  }\n\n  private updateHabitsFromData(events: Event[]): void {\n    if (events.length === 0) return\n\n    // 分析工作时间偏好\n    const workEvents = events.filter(e => \n      e.category === EventCategory.WORK || e.category === EventCategory.MEETING\n    )\n    \n    if (workEvents.length > 0) {\n      const workingHours = workEvents.map(e => e.startTime.getHours())\n      const minHour = Math.min(...workingHours)\n      const maxHour = Math.max(...workingHours)\n      \n      this.userHabits.preferredWorkingHours = {\n        start: Math.max(6, minHour - 1),\n        end: Math.min(22, maxHour + 2)\n      }\n    }\n\n    // 分析类别频率\n    const categoryCount: Partial<Record<EventCategory, number>> = {}\n    events.forEach(event => {\n      categoryCount[event.category] = (categoryCount[event.category] || 0) + 1\n    })\n\n    Object.entries(categoryCount).forEach(([category, count]) => {\n      this.userHabits.categoryFrequency[category as EventCategory] = count || 0\n    })\n\n    // 分析平均事件时长\n    const durations = events.map(e => e.estimatedDuration)\n    this.userHabits.averageEventDuration = durations.reduce((a, b) => a + b, 0) / durations.length || 60\n  }\n\n  /**\n   * 智能分析事件\n   */\n  analyzeEvent(event: Event, context: Event[]): AIAnalysis {\n    const cacheKey = `${event.id}-${context.length}`\n    if (this.analysisCache.has(cacheKey)) {\n      return this.analysisCache.get(cacheKey)!\n    }\n\n    const analysis: AIAnalysis = {\n      habitScore: this.calculateHabitScore(event),\n      energyAlignment: this.calculateEnergyAlignment(event),\n      conflictRisk: this.calculateConflictRisk(event, context),\n      optimizationScore: 0,\n      recommendations: []\n    }\n\n    analysis.optimizationScore = (\n      analysis.habitScore * 0.3 + \n      analysis.energyAlignment * 0.3 + \n      (1 - analysis.conflictRisk) * 0.4\n    )\n\n    analysis.recommendations = this.generateRecommendations(event, context, analysis)\n\n    this.analysisCache.set(cacheKey, analysis)\n    return analysis\n  }\n\n  private calculateHabitScore(event: Event): number {\n    const hour = event.startTime.getHours()\n    const { start, end } = this.userHabits.preferredWorkingHours\n    \n    // 时间匹配度\n    let timeScore = 1.0\n    if (event.category === EventCategory.WORK || event.category === EventCategory.MEETING) {\n      timeScore = (hour >= start && hour <= end) ? 1.0 : 0.3\n    }\n\n    // 时长匹配度\n    const expectedDuration = this.userHabits.categoryDurations[event.category]\n    const durationScore = Math.max(0.1, 1 - Math.abs(event.estimatedDuration - expectedDuration) / expectedDuration)\n\n    return (timeScore * 0.6 + durationScore * 0.4)\n  }\n\n  private calculateEnergyAlignment(event: Event): number {\n    const hour = event.startTime.getHours()\n    const isHighEnergyRequired = event.energyRequired === EnergyLevel.PEAK || event.energyRequired === EnergyLevel.HIGH\n    const isPeakHour = this.userHabits.peakEnergyHours.includes(hour)\n    const isLowHour = this.userHabits.lowEnergyHours.includes(hour)\n\n    if (isHighEnergyRequired && isPeakHour) return 1.0\n    if (isHighEnergyRequired && isLowHour) return 0.2\n    if (!isHighEnergyRequired && isLowHour) return 0.8\n    if (!isHighEnergyRequired && isPeakHour) return 0.6\n    \n    return 0.7 // 中性匹配\n  }\n\n  private calculateConflictRisk(event: Event, context: Event[]): number {\n    const conflicts = context.filter(existing => \n      existing.id !== event.id &&\n      this.eventsOverlap(event, existing)\n    )\n\n    if (conflicts.length === 0) return 0\n\n    // 考虑冲突的严重程度\n    const severeConflicts = conflicts.filter(c => \n      c.priority === Priority.URGENT || c.isMarketProtected\n    )\n\n    return Math.min(1, conflicts.length * 0.3 + severeConflicts.length * 0.4)\n  }\n\n  private eventsOverlap(event1: Event, event2: Event): boolean {\n    return event1.startTime < event2.endTime && event2.startTime < event1.endTime\n  }\n\n  private generateRecommendations(event: Event, context: Event[], analysis: AIAnalysis): AIRecommendation[] {\n    const recommendations: AIRecommendation[] = []\n\n    // 时间调整建议\n    if (analysis.habitScore < 0.6) {\n      recommendations.push({\n        type: 'time_adjustment',\n        title: '时间安排优化',\n        description: `建议将\"${event.title}\"调整到${this.getSuggestedTimeSlot(event)}`,\n        impact: 'medium',\n        confidence: 0.8,\n        action: 'reschedule'\n      })\n    }\n\n    // 精力优化建议\n    if (analysis.energyAlignment < 0.5) {\n      const energyTip = event.energyRequired === EnergyLevel.PEAK \n        ? '建议安排在上午9-11点或下午2-3点的高精力时段'\n        : '可以安排在下午1点或傍晚的低精力时段'\n      \n      recommendations.push({\n        type: 'energy_optimization',\n        title: '精力匹配优化',\n        description: energyTip,\n        impact: 'high',\n        confidence: 0.9\n      })\n    }\n\n    // 冲突解决建议\n    if (analysis.conflictRisk > 0.3) {\n      recommendations.push({\n        type: 'conflict_resolution',\n        title: '时间冲突处理',\n        description: '检测到时间冲突，建议重新安排或缩短事件时长',\n        impact: 'high',\n        confidence: 0.95,\n        action: 'resolve_conflict'\n      })\n    }\n\n    // 习惯改进建议\n    if (analysis.optimizationScore > 0.8) {\n      recommendations.push({\n        type: 'habit_improvement',\n        title: '优秀安排',\n        description: '这个时间安排很符合您的习惯，建议保持！',\n        impact: 'low',\n        confidence: 0.9\n      })\n    }\n\n    return recommendations\n  }\n\n  private getSuggestedTimeSlot(event: Event): string {\n    const { start, end } = this.userHabits.preferredWorkingHours\n    \n    if (event.category === EventCategory.TRADING) {\n      return '整点时间（如9:00, 10:00, 11:00）'\n    }\n    \n    if (event.energyRequired === EnergyLevel.PEAK) {\n      return `上午${Math.max(9, start)}:00-11:00 或下午14:00-15:00`\n    }\n    \n    return `工作时间内 ${start}:00-${end}:00`\n  }\n\n  /**\n   * 智能提醒系统\n   */\n  generateSmartReminders(event: Event): Array<{\n    time: Date\n    message: string\n    type: 'preparation' | 'energy' | 'conflict' | 'habit'\n  }>
